#include <iostream>
#include <string>
#include <cstdlib>
#include <cstdint>
#include <map>
#include <iterator>
#include <utility>
#include <algorithm>
#include <array>
#include <vector>
#include <stdlib.h>



uint8_t HexCharToUint(char c) {
    switch (c) {
        case '0' : return 0b00000000;
        case '1' : return 0b00000001;
        case '2' : return 0b00000010;
        case '3' : return 0b00000011;
        case '4' : return 0b00000100;
        case '5' : return 0b00000101;
        case '6' : return 0b00000110;
        case '7' : return 0b00000111;
        case '8' : return 0b00001000;
        case '9' : return 0b00001001;
        case 'a' : return 0b00001010;
        case 'b' : return 0b00001011;
        case 'c' : return 0b00001100;
        case 'd' : return 0b00001101;
        case 'e' : return 0b00001110;
        case 'f' : return 0b00001111;
        default: std::exit(1);
    }
}

char UintToHexChar(uint8_t u) {
    switch (u) {
        case 0b00000000: return '0';
        case 0b00000001: return '1';
        case 0b00000010: return '2';
        case 0b00000011: return '3';
        case 0b00000100: return '4';
        case 0b00000101: return '5';
        case 0b00000110: return '6';
        case 0b00000111: return '7';
        case 0b00001000: return '8';
        case 0b00001001: return '9';
        case 0b00001010: return 'a';
        case 0b00001011: return 'b';
        case 0b00001100: return 'c';
        case 0b00001101: return 'd';
        case 0b00001110: return 'e';
        case 0b00001111: return 'f';
        default: std::exit(1);
    }
}

std::string StringToHexString(const std::string& hex_string) {
    std::string res{};
    res.reserve(2 * hex_string.length());

    for (char c : hex_string) {
        res.push_back(UintToHexChar((static_cast<uint8_t>(c) & 0xF0) >> 4));
        res.push_back(UintToHexChar(static_cast<uint8_t>(c) & 0x0F));
    }

    return res;
}

std::string BlockToHexString(const std::array<uint8_t, 16> block) {
    std::string res{};
    res.reserve(32);

    for (uint8_t item : block) {
        res.push_back(UintToHexChar((item & 0xF0) >> 4));
        res.push_back(UintToHexChar(item & 0x0F));
    }

    return res;
}

std::array<uint8_t, 16> AES128AddRoundKey(const std::array<uint8_t, 16>& state, const std::array<uint8_t, 16>& key) {
    std::array<uint8_t, 16> res{};

    for (size_t i = 0; i < 16; i++) {
        res[i] = state[i] ^ key[i];
    }

    return res;
}

std::array<uint8_t, 16> AES128SubBytes(const std::array<uint8_t, 16>& state) {
    const std::array<uint8_t, 256> rijandael_s_box{0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16};

    std::array<uint8_t, 16> res{};

    for (size_t i = 0; i < 16; i++) {
        res[i] = rijandael_s_box[state[i]];
    }

    return res;
}

std::array<uint8_t, 16> AES128InverseSubBytes(const std::array<uint8_t, 16>& state) {
    const std::array<uint8_t, 256> inverse_rijandael_s_box{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};

    std::array<uint8_t, 16> res{};

    for (size_t i = 0; i < 16; i++) {
        res[i] = inverse_rijandael_s_box[state[i]];
    }

    return res;
}

std::array<uint8_t, 16> AES128ShiftRows(const std::array<uint8_t, 16>& state) {
    return std::array<uint8_t, 16>{
        state[0],  state[5],  state[10], state[15],
        state[4],  state[9],  state[14], state[3],
        state[8],  state[13], state[2],  state[7],
        state[12], state[1],  state[6],  state[11]
    };
}

std::array<uint8_t, 16> AES128InverseShiftRows(const std::array<uint8_t, 16>& state) {
    return std::array<uint8_t, 16>{
        state[0],  state[13], state[10], state[7],
        state[4],  state[1],  state[14], state[11],
        state[8],  state[5],  state[2],  state[15],
        state[12], state[9],  state[6],  state[3]
    };
}

std::array<uint8_t, 16> AES128MixColumns(const std::array<uint8_t, 16>& state) {
    const std::array<uint8_t, 256> multiply_by_2{0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E, 0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE, 0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05, 0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25, 0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45, 0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65, 0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85, 0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5, 0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5, 0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5};
    const std::array<uint8_t, 256> multiply_by_3{0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41, 0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1, 0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1, 0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1, 0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81, 0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A, 0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA, 0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA, 0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA, 0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A, 0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A, 0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A, 0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A};

    std::array<uint8_t, 16> res{};
    
    for (size_t i = 0; i < 4; i++) {
        uint8_t u0 = state[4 * i + 0];
        uint8_t u1 = state[4 * i + 1];
        uint8_t u2 = state[4 * i + 2];
        uint8_t u3 = state[4 * i + 3];

        res[4 * i + 0] = multiply_by_2[u0] ^ multiply_by_3[u1] ^ u2 ^ u3;
        res[4 * i + 1] = multiply_by_2[u1] ^ multiply_by_3[u2] ^ u3 ^ u0;
        res[4 * i + 2] = multiply_by_2[u2] ^ multiply_by_3[u3] ^ u0 ^ u1;
        res[4 * i + 3] = multiply_by_2[u3] ^ multiply_by_3[u0] ^ u1 ^ u2;
    }

    return res;
}

std::array<uint8_t, 16> AES128InverseMixColumns(const std::array<uint8_t, 16>& state) {
    const std::array<uint8_t, 256> multiply_by_9{0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46};
    const std::array<uint8_t, 256> multiply_by_11{0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3};
    const std::array<uint8_t, 256> multiply_by_13{0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97};
    const std::array<uint8_t, 256> multiply_by_14{0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d};

    std::array<uint8_t, 16> res{};
    
    for (size_t i = 0; i < 4; i++) {
        uint8_t u0 = state[4 * i + 0];
        uint8_t u1 = state[4 * i + 1];
        uint8_t u2 = state[4 * i + 2];
        uint8_t u3 = state[4 * i + 3];

        res[4 * i + 0] = multiply_by_14[u0] ^ multiply_by_11[u1] ^ multiply_by_13[u2] ^ multiply_by_9[u3];
        res[4 * i + 1] = multiply_by_9[u0] ^ multiply_by_14[u1] ^ multiply_by_11[u2] ^ multiply_by_13[u3];
        res[4 * i + 2] = multiply_by_13[u0] ^ multiply_by_9[u1] ^ multiply_by_14[u2] ^ multiply_by_11[u3];
        res[4 * i + 3] = multiply_by_11[u0] ^ multiply_by_13[u1] ^ multiply_by_9[u2] ^ multiply_by_14[u3];
    }

    return res;
}

std::array<uint8_t, 16> AES128EncryptBlock(const std::array<uint8_t, 16>& block, const std::array<uint8_t, 16>& initial_key, const size_t rounds) {
    std::vector<uint8_t> expanded_key{};
    expanded_key.reserve(16 * (rounds + 1));

    for (size_t i = 0; i < 16; i++) {
        expanded_key.push_back(initial_key[i]);
    }

    const std::array<uint8_t, 256> forward_rijandael_s_box{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
    const std::array<uint8_t, 256> rcon{0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d};

    for (size_t i = 16; i < 16 * (rounds + 1); i+=4) {
        std::array<uint8_t, 4> temp{};

        if (i % 16 == 0) {
            temp[0] = forward_rijandael_s_box[expanded_key[i - 3]] ^ rcon[static_cast<uint8_t>(i / 16)];
            temp[1] = forward_rijandael_s_box[expanded_key[i - 2]];
            temp[2] = forward_rijandael_s_box[expanded_key[i - 1]];
            temp[3] = forward_rijandael_s_box[expanded_key[i - 4]];
        } else {
            temp[0] = expanded_key[i - 4];
            temp[1] = expanded_key[i - 3];
            temp[2] = expanded_key[i - 2];
            temp[3] = expanded_key[i - 1];
        }

        expanded_key.push_back(expanded_key[i - 16 + 0] ^ temp[0]);
        expanded_key.push_back(expanded_key[i - 16 + 1] ^ temp[1]);
        expanded_key.push_back(expanded_key[i - 16 + 2] ^ temp[2]);
        expanded_key.push_back(expanded_key[i - 16 + 3] ^ temp[3]);
    }

    std::array<uint8_t, 16> res{};
    std::array<uint8_t, 16> key{};

    res = block;
    
    for (size_t r = 0; r < (rounds - 1); r++) {
        for (size_t i = 0; i < 16; i++) {
            key[i] = expanded_key[16 * r + i];
        }
        
        res = AES128AddRoundKey(res, key);
        res = AES128SubBytes(res);
        res = AES128ShiftRows(res);
        res = AES128MixColumns(res);
    }
    
    for (size_t i = 0; i < 16; i++) {
        key[i] = expanded_key[16 * (rounds - 1) + i];
    }
    
    res = AES128AddRoundKey(res, key);
    res = AES128SubBytes(res);
    res = AES128ShiftRows(res);

    for (size_t i = 0; i < 16; i++) {
        key[i] = expanded_key[16 * rounds + i];
    }

    res = AES128AddRoundKey(res, key);

    return res;
}

std::array<uint8_t, 16> AES128DecryptBlock(const std::array<uint8_t, 16>& block, const std::array<uint8_t, 16>& initial_key, const size_t rounds) {
    std::vector<uint8_t> expanded_key{};
    expanded_key.reserve(16 * (rounds + 1));

    for (size_t i = 0; i < 16; i++) {
        expanded_key.push_back(initial_key[i]);
    }

    const std::array<uint8_t, 256> forward_rijandael_s_box{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
    const std::array<uint8_t, 256> rcon{0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d};

    for (size_t i = 16; i < 16 * (rounds + 1); i+=4) {
        std::array<uint8_t, 4> temp{};

        if (i % 16 == 0) {
            temp[0] = forward_rijandael_s_box[expanded_key[i - 3]] ^ rcon[static_cast<uint8_t>(i / 16)];
            temp[1] = forward_rijandael_s_box[expanded_key[i - 2]];
            temp[2] = forward_rijandael_s_box[expanded_key[i - 1]];
            temp[3] = forward_rijandael_s_box[expanded_key[i - 4]];
        } else {
            temp[0] = expanded_key[i - 4];
            temp[1] = expanded_key[i - 3];
            temp[2] = expanded_key[i - 2];
            temp[3] = expanded_key[i - 1];
        }

        expanded_key.push_back(expanded_key[i - 16 + 0] ^ temp[0]);
        expanded_key.push_back(expanded_key[i - 16 + 1] ^ temp[1]);
        expanded_key.push_back(expanded_key[i - 16 + 2] ^ temp[2]);
        expanded_key.push_back(expanded_key[i - 16 + 3] ^ temp[3]);
    }

    std::array<uint8_t, 16> res{};

    std::array<uint8_t, 16> key{};
    for (size_t i = 0; i < 16; i++) {
        key[i] = expanded_key[16 * rounds + i];
    }

    res = AES128AddRoundKey(block, key);
    res = AES128InverseShiftRows(res);
    res = AES128InverseSubBytes(res);
    
    for (size_t r = (rounds - 1); r >= 1; r--) {
        for (size_t i = 0; i < 16; i++) {
            key[i] = expanded_key[16 * r + i];
        }

        
        res = AES128AddRoundKey(res, key);
        res = AES128InverseMixColumns(res);
        res = AES128InverseShiftRows(res);
        res = AES128InverseSubBytes(res);
    }
    
    for (size_t i = 0; i < 16; i++) {
        key[i] = expanded_key[i];
    }

    res = AES128AddRoundKey(res, key);

    return res;
}

std::array<uint8_t, 16> HexToBlock(const std::string& hex_string) {
    if (hex_string.length() != 32) {
        std::exit(1);
    }

    std::array<uint8_t, 16> res{};

    for (size_t i = 0; i < 16; i++) {
        uint8_t high = HexCharToUint(hex_string[2 * i]);
        uint8_t low = HexCharToUint(hex_string[2 * i + 1]);

        res[i] = (high << 4) | low;
    }

    return res;
}

std::string AES128ECBEncrypt(const std::string& s, const std::array<uint8_t, 16>& key, const size_t rounds) {
    if (s.length() % 32 != 0) {
        std::exit(1);
    }

    std::string res{};
    res.reserve(s.length() / 2);

    std::array<uint8_t, 16> encrypted_block{};

    for (size_t i = 0; (i + 32) <= s.length(); i += 32) {
        encrypted_block = AES128EncryptBlock(HexToBlock(s.substr(i, 32)), key, rounds);

        for (size_t j = 0; j < 16; j++) {
            res.push_back(static_cast<char>(encrypted_block[j]));
        }
    }

    return res;
}

std::string AES128ECBDecrypt(const std::string& s, const std::array<uint8_t, 16>& key, const size_t rounds) {
    if (s.length() % 32 != 0) {
        std::exit(1);
    }

    std::string res{};
    res.reserve(s.length() / 2);

    std::array<uint8_t, 16> decrypted_block{};

    for (size_t i = 0; (i + 32) <= s.length(); i += 32) {
        decrypted_block = AES128DecryptBlock(HexToBlock(s.substr(i, 32)), key, rounds);

        for (size_t j = 0; j < 16; j++) {
            res.push_back(static_cast<char>(decrypted_block[j]));
        }
    }

    return res;
}

std::string AES128CBCEncrypt(const std::string& s, const std::array<uint8_t, 16>& key, const std::array<uint8_t, 16>& base_iv, const size_t rounds) {
    if (s.length() % 32 != 0) {
        std::exit(1);
    }

    std::array<uint8_t, 16> iv{base_iv};

    std::string res{};
    res.reserve(s.length() / 2);

    std::array<uint8_t, 16> encrypted_block{};

    for (size_t i = 0; (i + 32) <= s.length(); i += 32) {
        HexToBlock(s.substr(i, 32));
        encrypted_block = AES128AddRoundKey(HexToBlock(s.substr(i, 32)), iv);
        encrypted_block = AES128EncryptBlock(encrypted_block, key, rounds);
        iv = encrypted_block;

        for (size_t j = 0; j < 16; j++) {
            res.push_back(static_cast<char>(encrypted_block[j]));
        }
    }

    return res;
}

std::string AES128CBCDecrypt(const std::string& s, const std::array<uint8_t, 16>& key, const std::array<uint8_t, 16>& base_iv, const size_t rounds) {
    if (s.length() % 32 != 0) {
        std::exit(1);
    }

    std::array<uint8_t, 16> iv{base_iv};

    std::string res{};
    res.reserve(s.length() / 2);

    std::array<uint8_t, 16> decrypted_block{};

    for (size_t i = 0; (i + 32) <= s.length(); i += 32) {
        decrypted_block = AES128DecryptBlock(HexToBlock(s.substr(i, 32)), key, rounds);
        decrypted_block = AES128AddRoundKey(decrypted_block, iv);
        iv = HexToBlock(s.substr(i, 32));

        for (size_t j = 0; j < 16; j++) {
            res.push_back(static_cast<char>(decrypted_block[j]));
        }
    }

    return res;
}

std::string RandomString(size_t length) {
    std::string res{};
    res.reserve(length);

    for (size_t i = 0; i < length; i++) {
        res.push_back(rand());
    }

    return res;
}

std::string RandomEncryption(const std::string& s) {
    size_t seed = time(NULL);
    srand(seed);
    std::cout << "srand seed: " << seed << std::endl;

    std::string key_string{RandomString(16)};
    
    std::array<uint8_t, 16> key{
        static_cast<uint8_t>(key_string[0]),  static_cast<uint8_t>(key_string[1]),  static_cast<uint8_t>(key_string[2]),  static_cast<uint8_t>(key_string[3]), 
        static_cast<uint8_t>(key_string[4]),  static_cast<uint8_t>(key_string[5]),  static_cast<uint8_t>(key_string[6]),  static_cast<uint8_t>(key_string[7]), 
        static_cast<uint8_t>(key_string[8]),  static_cast<uint8_t>(key_string[9]),  static_cast<uint8_t>(key_string[10]), static_cast<uint8_t>(key_string[11]), 
        static_cast<uint8_t>(key_string[12]), static_cast<uint8_t>(key_string[13]), static_cast<uint8_t>(key_string[14]), static_cast<uint8_t>(key_string[15])
    };

    size_t pad_left_amount = (rand() % 5) + 5;
    std::string padded_s{RandomString(pad_left_amount) + s + RandomString(16 - ((pad_left_amount + s.length()) % 16))};

    std::cout << padded_s << std::endl;

    const int ROUNDS = 10;

    if ((rand() % 2) == 0) {
        std::array<uint8_t, 16> iv{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        for (size_t i = 0; i < iv.size(); i++) {
            iv[i] = static_cast<uint8_t>(rand() % 255);
            std::cout << static_cast<unsigned>(iv[i]) << ", ";
        }
        std::cout << std::endl;

        return AES128CBCEncrypt(StringToHexString(padded_s), key, iv, ROUNDS);
    } else {
        return AES128ECBEncrypt(StringToHexString(padded_s), key, ROUNDS);
    }
}

int main() {
    std::string s{
        "I'm back and I'm ringin' the bell "
        "A rockin' on the mike while the fly girls yell "
        "In ecstasy in the back of me "
        "Well that's my DJ Deshay cuttin' all them Z's "
        "Hittin' hard and the girlies goin' crazy "
        "Vanilla's on the mike, man I'm not lazy. "
        ""
        "I'm lettin' my drug kick in "
        "It controls my mouth and I begin "
        "To just let it flow, let my concepts go "
        "My posse's to the side yellin', Go Vanilla Go! "
        ""
        "Smooth 'cause that's the way I will be "
        "And if you don't give a damn, then "
        "Why you starin' at me "
        "So get off 'cause I control the stage "
        "There's no dissin' allowed "
        "I'm in my own phase "
        "The girlies sa y they love me and that is ok "
        "And I can dance better than any kid n' play "
        ""
        "Stage 2 -- Yea the one ya' wanna listen to "
        "It's off my head so let the beat play through "
        "So I can funk it up and make it sound good "
        "1-2-3 Yo -- Knock on some wood "
        "For good luck, I like my rhymes atrocious "
        "Supercalafragilisticexpialidocious "
        "I'm an effect and that you can bet "
        "I can take a fly girl and make her wet. "
        ""
        "I'm like Samson -- Samson to Delilah "
        "There's no denyin', You can try to hang "
        "But you'll keep tryin' to get my style "
        "Over and over, practice makes perfect "
        "But not if you're a loafer. "
        ""
        "You'll get nowhere, no place, no time, no girls "
        "Soon -- Oh my God, homebody, you probably eat "
        "Spaghetti with a spoon! Come on and say it! "
        ""
        "VIP. Vanilla Ice yep, yep, I'm comin' hard like a rhino "
        "Intoxicating so you stagger like a wino "
        "So punks stop trying and girl stop cryin' "
        "Vanilla Ice is sellin' and you people are buyin' "
        "'Cause why the freaks are jockin' like Crazy Glue "
        "Movin' and groovin' trying to sing along "
        "All through the ghetto groovin' this here song "
        "Now you're amazed by the VIP posse. "
        ""
        "Steppin' so hard like a German Nazi "
        "Startled by the bases hittin' ground "
        "There's no trippin' on mine, I'm just gettin' down "
        "Sparkamatic, I'm hangin' tight like a fanatic "
        "You trapped me once and I thought that "
        "You might have it "
        "So step down and lend me your ear "
        "'89 in my time! You, '90 is my year. "
        ""
        "You're weakenin' fast, YO! and I can tell it "
        "Your body's gettin' hot, so, so I can smell it "
        "So don't be mad and don't be sad "
        "'Cause the lyrics belong to ICE, You can call me Dad "
        "You're pitchin' a fit, so step back and endure "
        "Let the witch doctor, Ice, do the dance to cure "
        "So come up close and don't be square "
        "You wanna battle me -- Anytime, anywhere "
        ""
        "You thought that I was weak, Boy, you're dead wrong "
        "So come on, everybody and sing this song "
        ""
        "Say -- Play that funky music Say, go white boy, go white boy go "
        "play that funky music Go white boy, go white boy, go "
        "Lay down and boogie and play that funky music till you die. "
        ""
        "Play that funky music Come on, Come on, let me hear "
        "Play that funky music white boy you say it, say it "
        "Play that funky music A little louder now "
        "Play that funky music, white boy Come on, Come on, Come on "
        "Play that funky music"
    };

    std::string encrypted{RandomEncryption(s)};

    
    size_t l = static_cast<size_t>(encrypted.length() / 16);
    bool any_match = false;

    // it might be smart to try these with an offset
    for (size_t i = 0; i < (l - 1); i++) {
        for (size_t j = (i + 1); j < l; j++) {
            std::string ss_i = encrypted.substr(16 * i, 16);
            std::string ss_j = encrypted.substr(16 * j, 16);

            if (ss_i == ss_j) {
                any_match = true;
                
                std::cout << "found match, this is possibly ECB" << std::endl;
                std::cout << "substring 1: " << ss_i << " from index: " << 16 * i << std::endl;
                std::cout << "substring 2: " << ss_j << " from index: " << 16 * j << std::endl;
            }
        }
    }

    return 0;
}